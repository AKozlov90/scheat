{
  "name": "is-function-x",
  "version": "1.2.0",
  "description": "Determine whether a given value is a function object.",
  "homepage": "https://github.com/Xotic750/is-function-x",
  "author": {
    "name": "Graham Fairweather",
    "email": "xotic750@gmail.com"
  },
  "copyright": "Copyright (c) 2015-2017",
  "keywords": [
    "ES6",
    "isFunction",
    "module",
    "javascript",
    "nodejs",
    "browser"
  ],
  "main": "index.js",
  "engines": {
    "node": "*"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Xotic750/is-function-x.git"
  },
  "bugs": {
    "url": "https://github.com/Xotic750/is-function-x/issues"
  },
  "dependencies": {
    "has-to-string-tag-x": "^1.2.0",
    "to-string-tag-x": "^1.1.1",
    "is-primitive": "^2.0.0"
  },
  "devDependencies": {
    "@ljharb/eslint-config": "^11.0.0",
    "browserify": "^14.1.0",
    "browserify-derequire": "^0.9.4",
    "es5-shim": "^4.5.9",
    "es6-shim": "^0.35.3",
    "es7-shim": "^6.0.0",
    "eslint": "^3.18.0",
    "eslint-plugin-import": "^2.2.0",
    "jasmine-node": "^1.14.5",
    "jsdoc-to-markdown": "^3.0.0",
    "json3": "^3.3.2",
    "make-jasmine-spec-runner-html": "^1.1.0",
    "nodemon": "^1.11.0",
    "nsp": "^2.6.3",
    "replace-x": "^1.1.1",
    "uglify-js": "^2.8.18"
  },
  "scripts": {
    "build": "npm run build:setver && npm run security && npm run eslint && npm run browserify && npm run uglify && npm run docs && npm run build:jasmine && npm test",
    "build:jasmine": "make-jasmine-spec-runner-html",
    "build:setver": "PKG_VER=$(node -p -e \"require('./package.json').version\") && replace-x \" @version .*\" \" @version ${PKG_VER}\" index.js",
    "build:watch": "nodemon --watch index.js --watch package.json --exec 'npm run build'",
    "docs": "jsdoc2md --name-format --example-lang js index.js > README.md",
    "eslint": "eslint *.js tests/spec/*.js",
    "security": "nsp check",
    "test": "jasmine-node --matchall tests/spec/",
    "test:watch": "nodemon --watch tests/spec/test.js --exec 'npm test'",
    "browserify": "browserify -p browserify-derequire -e index.js -o lib/is-function-x.js -u 'crypto' -s returnExports",
    "uglify": "uglifyjs lib/is-function-x.js -o lib/is-function-x.min.js --compress --keep-fnames --mangle --beautify ascii_only=true,beautify=false --source-map lib/is-function-x.map"
  },
  "readme": "<a name=\"module_is-function-x\"></a>\n\n## is-function-x\n<a href=\"https://travis-ci.org/Xotic750/is-function-x\"\ntitle=\"Travis status\">\n<img\nsrc=\"https://travis-ci.org/Xotic750/is-function-x.svg?branch=master\"\nalt=\"Travis status\" height=\"18\">\n</a>\n<a href=\"https://david-dm.org/Xotic750/is-function-x\"\ntitle=\"Dependency status\">\n<img src=\"https://david-dm.org/Xotic750/is-function-x.svg\"\nalt=\"Dependency status\" height=\"18\"/>\n</a>\n<a\nhref=\"https://david-dm.org/Xotic750/is-function-x#info=devDependencies\"\ntitle=\"devDependency status\">\n<img src=\"https://david-dm.org/Xotic750/is-function-x/dev-status.svg\"\nalt=\"devDependency status\" height=\"18\"/>\n</a>\n<a href=\"https://badge.fury.io/js/is-function-x\" title=\"npm version\">\n<img src=\"https://badge.fury.io/js/is-function-x.svg\"\nalt=\"npm version\" height=\"18\">\n</a>\n\nDetermine whether a given value is a function object.\n\n**Version**: 1.2.0  \n**Author**: Xotic750 <Xotic750@gmail.com>  \n**License**: [MIT](&lt;https://opensource.org/licenses/MIT&gt;)  \n**Copyright**: Xotic750  \n<a name=\"exp_module_is-function-x--module.exports\"></a>\n\n### `module.exports(value)` ⇒ <code>boolean</code> ⏏\nChecks if `value` is classified as a `Function` object.\n\n**Kind**: Exported function  \n**Returns**: <code>boolean</code> - Returns `true` if `value` is correctly classified,\nelse `false`.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>\\*</code> | The value to check. |\n\n**Example**  \n```js\nvar isFunction = require('is-function-x');\n\nisFunction(); // false\nisFunction(Number.MIN_VALUE); // false\nisFunction('abc'); // false\nisFunction(true); // false\nisFunction({ name: 'abc' }); // false\nisFunction(function () {}); // true\nisFunction(new Function ()); // true\nisFunction(function* test1() {}); // true\nisFunction(function test2(a, b) {}); // true\nisFunction(class Test {}); // true\nisFunction((x, y) => {return this;}); // true\n```\n",
  "readmeFilename": "README.md",
  "_id": "is-function-x@1.2.0",
  "_from": "is-function-x@^1.2.0"
}
